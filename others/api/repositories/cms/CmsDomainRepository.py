from typing import List, Optionalfrom fastapi import Dependsfrom sqlalchemy.orm import Session, lazyloadfrom configs.Database import (    get_db_connection,)from models.cms.CmsDomainModel import CmsDomainfrom schemas.pydantic.cms.CmsDomainSchema import (    CmsDomainSearchReqSchema,)class CmsDomainRepository:    db: Session    def __init__(        self, db: Session = Depends(get_db_connection)    ) -> None:        self.db = db    def list(        self,request_schema: CmsDomainSearchReqSchema    ) -> List[CmsDomain]:        query = self.db.query(CmsDomain)        if request_schema.domain_id_test:            query = query.filter_by(domain_id_test=request_schema.domain_id_test)        if request_schema.domain_name:            query = query.filter_by(domain_name=request_schema.domain_name)        if request_schema.url:            query = query.filter_by(url=request_schema.url)        if request_schema.path:            query = query.filter_by(path=request_schema.path)        # query = query.order_by(CmsDomain.surveyNo.desc())        return query.offset(request_schema.start).limit(request_schema.limit).all()    def count(self,request_schema: CmsDomainSearchReqSchema) -> int:        query = self.db.query(CmsDomain)        if request_schema.domain_id_test:            query = query.filter_by(domain_id_test=request_schema.domain_id_test)        if request_schema.domain_name:            query = query.filter_by(domain_name=request_schema.domain_name)        if request_schema.url:            query = query.filter_by(url=request_schema.url)        if request_schema.path:            query = query.filter_by(path=request_schema.path)        return query.count()    def get(self, cms_domain: CmsDomain) -> CmsDomain:        return self.db.get(            CmsDomain, (              cms_domain.domain_id_test            ,  cms_domain.domain_name            )        )    def create(self, cms_domain: CmsDomain) -> CmsDomain:        self.db.add(cms_domain)        self.db.commit()        self.db.refresh(cms_domain)        return cms_domain    def update(self, cms_domain: CmsDomain) -> CmsDomain:        self.db.merge(cms_domain)        self.db.commit()        return cms_domain    def delete(self, cms_domain: CmsDomain) -> None:        self.db.delete(cms_domain)        self.db.commit()        self.db.flush()