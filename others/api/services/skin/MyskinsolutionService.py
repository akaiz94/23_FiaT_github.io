from datetime import datetimefrom typing import List, Optionalfrom fastapi import Dependsfrom models.skin.MyskinsolutionModel import Myskinsolutionfrom repositories.skin.MyskinsolutionRepository import MyskinsolutionRepositoryfrom schemas.pydantic.skin.MyskinsolutionSchema import (    MyskinsolutionSchema,MyskinsolutionPostSchema,    MyskinsolutionSearchReqSchema,MyskinsolutionResSchema,)class MyskinsolutionService:    myskinsolutionRepository: MyskinsolutionRepository    def __init__(        self,        myskinsolutionRepository: MyskinsolutionRepository = Depends(),        ) -> None:        self.myskinsolutionRepository = myskinsolutionRepository    def list(        self,            idx: Optional[int] = None,            surveyNo: Optional[int] = None,            userKey: Optional[int] = None,            name: Optional[str] = None,            pageSize: Optional[int] = 10,            startIndex: Optional[int] = 0,    ) -> List[Myskinsolution]:        return self.myskinsolutionRepository.list(idx,surveyNo, userKey,name,pageSize,startIndex)    def count(        self,            idx: Optional[int] = None,            surveyNo: Optional[int] = None,            userKey: Optional[int] = None,            name: Optional[str] = None,    ) -> int:        return self.myskinsolutionRepository.count(idx,surveyNo, userKey,name)    def get(self,            idx: int,    ) -> Myskinsolution:        return self.myskinsolutionRepository.get(Myskinsolution(            idx = idx,            ))    def update(        self,        idx: int,         tbCMyskinsolution_body: MyskinsolutionSchema    ) -> Myskinsolution:        tbCMyskinsolution = self.get(            idx,            )        update_fields = []        for field in tbCMyskinsolution_body.__dict__:            if field in tbCMyskinsolution.__dict__:                update_fields.append(field)        for field in update_fields:            if field != '_sa_instance_state':                setattr(tbCMyskinsolution, field, getattr(tbCMyskinsolution_body, field))        return self.myskinsolutionRepository.update(            idx,            tbCMyskinsolution)    def create(        self,         tbCMyskinsolution_body: MyskinsolutionSchema    ) -> Myskinsolution:        return self.myskinsolutionRepository.create(            Myskinsolution(**tbCMyskinsolution_body.dict())        )    def deleteForce(self,        idx,    ) -> None:        tbCMyskinsolution = self.get(            idx,            )        return self.myskinsolutionRepository.delete(tbCMyskinsolution)    def delete(self,        idx,     ) -> None:        self.update(            idx,            Myskinsolution(deleted_at=datetime.now()))