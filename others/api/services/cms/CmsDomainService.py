from datetime import datetimefrom typing import List, Optionalfrom fastapi import Dependsfrom models.cms.CmsDomainModel import CmsDomainfrom repositories.cms.CmsDomainRepository import CmsDomainRepositoryfrom schemas.pydantic.cms.CmsDomainSchema import (    CmsDomainSchema,CmsDomainPostSchema,    CmsDomainSearchReqSchema,CmsDomainResSchema,)class CmsDomainService:    cmsDomainRepository: CmsDomainRepository    def __init__(        self,        cmsDomainRepository: CmsDomainRepository = Depends(),        ) -> None:        self.cmsDomainRepository = cmsDomainRepository    def list(        self,        request_schema: CmsDomainSearchReqSchema    ) -> List[CmsDomain]:        return self.cmsDomainRepository.list(request_schema)    def count(        self,        request_schema: CmsDomainSearchReqSchema    ) -> int:        return self.cmsDomainRepository.count(request_schema)    def get(self,            domain_id_test: str,            domain_name: str,    ) -> CmsDomain:        return self.cmsDomainRepository.get(CmsDomain(            domain_id_test = domain_id_test,            domain_name = domain_name,            ))    def update(        self,        domain_id_test: str,         domain_name: str,         cms_domain_body: CmsDomainSchema    ) -> CmsDomain:        cms_domain = self.get(            domain_id_test,            domain_name,            )        update_fields = []        for field in cms_domain_body.__dict__:            if field in cms_domain.__dict__:                update_fields.append(field)        for field in update_fields:            if field != '_sa_instance_state':                setattr(cms_domain, field, getattr(cms_domain_body, field))        return self.cmsDomainRepository.update(            domain_id_test,            domain_name,            cms_domain)    def create(        self,         cms_domain_body: CmsDomainSchema    ) -> CmsDomain:        return self.cmsDomainRepository.create(            CmsDomain(**cms_domain_body.dict())        )    def deleteForce(self,        domain_id_test,        domain_name,    ) -> None:        cms_domain = self.get(            domain_id_test,            domain_name,            )        return self.cmsDomainRepository.delete(cms_domain)    def delete(self,        domain_id_test,         domain_name,     ) -> None:        self.update(            domain_id_test,            domain_name,            CmsDomain(deleted_at=datetime.now()))