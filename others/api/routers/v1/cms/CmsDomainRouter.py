from typing import List, Optionalfrom fastapi import APIRouter, Depends, statusfrom configs.OAuth import get_current_user, TokenDatafrom schemas.pydantic.cms.CmsDomainSchema import (    CmsDomainSchema,CmsDomainPostSchema,    CmsDomainSearchReqSchema,CmsDomainResSchema,)from services.cms.CmsDomainService import CmsDomainServicefrom services.mb.UserService import UserServiceCmsDomainRouter = APIRouter(prefix="/v1/cmsDomain", tags=["cms_domain"])@CmsDomainRouter.get("/", response_model=List[CmsDomainResSchema])def index(    request_schema: CmsDomainSearchReqSchema = Depends(),    cmsDomainService: CmsDomainService = Depends(),    # current_user: TokenData = Depends(get_current_user),    userService: UserService = Depends(),):    result_list = []    count = cmsDomainService.count(request_schema)    for data in cmsDomainService.list(request_schema):        user = None        if data.surveyNo is not None and data.surveyNo != 0 :            user = userService.get(data.surveyNo)        scheam = CmsDomainResSchema(            **{**data.__dict__, 'total_count':count}        )        result_list.append(scheam)    return result_list@CmsDomainRouter.get("/{id}", response_model=CmsDomainSchema)def get(    domain_id_test: str,    domain_name: str,    cmsDomainService: CmsDomainService = Depends(),    # current_user: TokenData = Depends(get_current_user),    userService: UserService = Depends(),):    return cmsDomainService.get(     domain_id_test    , domain_name    )@CmsDomainRouter.post(    "/",    response_model=CmsDomainSchema,    status_code=status.HTTP_201_CREATED,)def create(    cmsDomain: CmsDomainPostSchema,    cmsDomainService: CmsDomainService = Depends(),    # current_user: TokenData = Depends(get_current_user),    userService: UserService = Depends(),):    user = userService.get(current_user.surveyNo)    return cmsDomainService.create(cmsDomain)@CmsDomainRouter.patch("/{id}", response_model=CmsDomainSchema)def update(    domain_id_test: str ,    domain_name: str ,    cmsDomain: CmsDomainPostSchema,    cmsDomainService: CmsDomainService = Depends(),    # current_user: TokenData = Depends(get_current_user),    userService: UserService = Depends(),):    user = userService.get(current_user.surveyNo)    return cmsDomainService.update(    domain_id_test ,    domain_name ,    cmsDomain)@CmsDomainRouter.delete(    "/{id}", status_code=status.HTTP_204_NO_CONTENT)def delete(    domain_id_test: str ,    domain_name: str ,    cmsDomainService: CmsDomainService = Depends(),    # current_user: TokenData = Depends(get_current_user),    userService: UserService = Depends(),):    user = userService.get(current_user.surveyNo)    return cmsDomainService.delete(    domain_id_test ,    domain_name ,    )